// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: showmeat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MeatService_GetMeatAmounts_FullMethodName = "/meat.MeatService/GetMeatAmounts"
)

// MeatServiceClient is the client API for MeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The meat service definition.
type MeatServiceClient interface {
	// Sends a MeatRequest and receives a MeatResponse.
	GetMeatAmounts(ctx context.Context, in *MeatRequest, opts ...grpc.CallOption) (*MeatResponse, error)
}

type meatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeatServiceClient(cc grpc.ClientConnInterface) MeatServiceClient {
	return &meatServiceClient{cc}
}

func (c *meatServiceClient) GetMeatAmounts(ctx context.Context, in *MeatRequest, opts ...grpc.CallOption) (*MeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeatResponse)
	err := c.cc.Invoke(ctx, MeatService_GetMeatAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeatServiceServer is the server API for MeatService service.
// All implementations must embed UnimplementedMeatServiceServer
// for forward compatibility
//
// The meat service definition.
type MeatServiceServer interface {
	// Sends a MeatRequest and receives a MeatResponse.
	GetMeatAmounts(context.Context, *MeatRequest) (*MeatResponse, error)
	mustEmbedUnimplementedMeatServiceServer()
}

// UnimplementedMeatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeatServiceServer struct {
}

func (UnimplementedMeatServiceServer) GetMeatAmounts(context.Context, *MeatRequest) (*MeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeatAmounts not implemented")
}
func (UnimplementedMeatServiceServer) mustEmbedUnimplementedMeatServiceServer() {}

// UnsafeMeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeatServiceServer will
// result in compilation errors.
type UnsafeMeatServiceServer interface {
	mustEmbedUnimplementedMeatServiceServer()
}

func RegisterMeatServiceServer(s grpc.ServiceRegistrar, srv MeatServiceServer) {
	s.RegisterService(&MeatService_ServiceDesc, srv)
}

func _MeatService_GetMeatAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeatServiceServer).GetMeatAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeatService_GetMeatAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeatServiceServer).GetMeatAmounts(ctx, req.(*MeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeatService_ServiceDesc is the grpc.ServiceDesc for MeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meat.MeatService",
	HandlerType: (*MeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeatAmounts",
			Handler:    _MeatService_GetMeatAmounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "showmeat.proto",
}
